{"version":3,"sources":["workers/GeneratePuzzle.worker.ts","serviceWorker.ts","store/types.ts","models/Difficulty.ts","models/Cell.ts","models/Row.ts","models/Analyzer.ts","models/Sudoku.ts","PuzzleStorage.ts","store/reducers.ts","models/Settings.ts","store/index.ts","presentation/SudokuCell.tsx","presentation/SudokuRow.tsx","presentation/Sudoku.tsx","presentation/Numbers.tsx","store/actions.ts","utils/ServiceWorkerUpdated.ts","presentation/TopBar.tsx","presentation/CompletedDialog.tsx","presentation/ExitPrompt.tsx","presentation/App.tsx","theme.ts","index.tsx"],"names":["module","exports","Worker","__webpack_require__","p","isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","concat","fetch","then","response","contentType","headers","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","DIRECTION","MODE","DIFFICULTY","CHANGE_DIFFICULTY","NEW_GAME","VALIDATE_SOLUTION","TOGGLE_CELL","SET_DIGIT","REMOVE_DIGIT","NAVIGATE_CELLS","TOGGLE_NOTE_MODE","UNDO","REDO","TOGGLE_NIGHT_MODE","RESET_SUDOKU","FILL_CANDIDATES","CLEAR_CANDIDATES","TOGGLE_SETTING_USE_NOTES","TOGGLE_SETTING_MARK_COMPLETED","TOGGLE_SETTING_PROGRESS","TOGGLE_EXIT_PROMPT","NO_NOTES","Cell","previous","Object","classCallCheck","this","value","valid","solution","row","column","given","active","notes","calculateBlock","modifier","cell","digit","mode","Note","map","x","i","n","data","Row","cells","index","c","validate","setActive","isActive","getColumn","setDigit","removeDigit","clearNotes","toConsumableArray","_ref","_ref2","slicedToArray","create","deserialize","Analyzer","rows","blocks","columns","v","_this$findParents","findParents","block","push","_this$segment","segment","candidates","_this$findParents2","candidate","isAvailable","flatData","reduce","s","findCandidates","result","Sudoku","activeCell","createdAt","sudoku","r","toggleCell","allNumbers","acc","next","getCells","getValue","solved","_loop","filter","length","dirrection","increment","val","decrement","objectSpread","Up","Down","Right","Left","activateCell","every","isSolved","flatMap","sum","getNotes","getCandidates","forEach","rowCandidates","cellCandidates","clearCandidates","JSON","stringify","Date","now","d","serialized","parse","assign","EMPTY_DATA","src_PuzzleStorage","PuzzleStorage","_this","worker","inititializeStorage","GeneratePuzzleWorker","e","addPuzzle","hasLocalStorageKeys","_puzzles","puzzles","defineProperty","VeryEasy","saveJSONPuzzles","Puzzles","Easy","Normal","Hard","VeryHard","save","localStorage","_this2","id","uuid","puzzle","decodedPuzle","difficulty","puzzleMap","load","shift","decodeStoredPuzzle","postMessage","message","puzzleData","key","setItem","initialSettings","Settings","notesEnabled","nightModeEnabled","inputMode","progressEnabled","markCompletedNumbersEnabled","Input","readSettingsFromLocalStorage","settingsString","settings","keys","saveSettingsToLocalStorage","savedCurrentSudoku","getItem","initialState","past","current","getPuzzle","Difficulty","future","showExitPrompt","rootReducer","combineReducers","game","arguments","undefined","action","type","setDifficulty","payload","serialize","force","InputMode","navigate","direction","setInputMode","slice","toggleNightModeEnabled","fillCandidates","NotesEnabled","toggleNotesEnabled","toggleMarkCompletedNumbersEnabled","toggleProgressEnabled","gameReducerImplemenation","SudokuCellComponent","classes","props","react_default","a","createElement","className","container","onClick","handleClick","calculateClasses","renderContent","style","fontSize","size","Math","ceil","cellClasses","note1","note2","note3","note4","note5","note6","note7","note8","note9","Fragment","note","activeNote","inactiveNote","getRow","_result","getBlock","content","thickBorderTop","thickBorderBottom","thickBorderLeft","thickBorderRight","dark","isGiven","invalid","isValid","join","Component","withStyles","theme","borderThin","palette","primary","borderThick","createStyles","display","position","width","paddingBottom","textAlign","userSelect","fontFamily","justifyContent","alignItems","top","right","bottom","left","borderRight","borderBottom","color","grey","borderTop","borderLeft","backgroundColor","light","fontWeight","opacity","contrastText","SudokuRowComponent","sudokuRow","renderRow","SudokuCell","getCellSize","rowSize","SudokuComponent","possibleConstructorReturn","getPrototypeOf","call","containerRef","setCellSize","rowDOM","boundingRectangle","getBoundingClientRect","height","smallestDimmesion","fittedDimmension","floor","setState","requestAnimationFrame","React","createRef","menuAnchor","index_es","cardContent","ref","renderRows","toolbar","toolbarButton","disabled","undo","Undo_default","Clear_default","redo","Redo_default","_this3","getRows","SudokuRow","padding","marginLeft","marginRight","@media (orientation: portrait)","spacing","unit","@media (orientation: landscape)","header","headerButton","INumbers","longPressTimeout","clickHandledByLongPress","setTimeout","clearTimeout","countEmptyCells","showRedProgressBar","Array","isDigitCompleted","MarkCompletedNumbersEnabled","Chip_default","onMouseDown","mouseDownHandler","onTouchStart","onMouseUp","mouseUpHandler","onTouchEnd","chip","label","ProgressEnabled","progress","bar","errorBar","variant","getProgress","paddingTop","borderBottomRightRadius","borderBottomLeftRadius","successBar","margin","toggleExitPrompt","resolvePromise","updateExistsPromise","Promise","resolve","reject","registerUpdate","DIFFICUTIES","TopBar","drawerOpen","difficultyOpen","helpOpen","hasUpdates","featuresOpen","ServiceWorkerUpdated","AppBar_default","Toolbar_default","IconButton_default","menuButton","openDrawer","Menu_default","Typography_default","grow","getBarText","FormControlLabel_default","notesToggle","labelPlacement","toggleNightMode","control","Switch_default","checked","NightModeEnabled","Drawer_default","paper","drawerPaper","open","onClose","closeDrawer","drawerHeader","ChevronLeft_default","List_default","drawerList","ListSubheader_default","listHeader","ListItem_default","button","createNewGame","ListItemIcon_default","Casino_default","ListItemText_default","reset","Replay_default","toggleHelp","Help_default","ExpandLess_default","subMenuButton","ExpandMore_default","Collapse_default","in","timeout","unmountOnExit","disablePadding","toggleDifficulty","FitnessCenter_default","renderDifficulties","toggleFeatures","Settings_default","feature","toggleMarkCompleted","toggleProgress","forceRefresh","SyncProblem_default","option","selected","changeDifficulty","validateSolution","_this4","find","resetSudoku","getRegistration","clear","_drawerPaper","flexGrow","modeFab","zIndex","paddingLeft","paddingRight","secondary","main","breakpoints","down","minWidth","up","background","default","textTransform","common","white","hiddenFor","ellapsedTime","milliSeconds","pad","num","round","toString","padStart","seconds","minutes","hours","formatMillisecons","getCreationTimestamp","disableBackdropClick","disableEscapeKeyDown","maxWidth","fullWidth","gutterBottom","difficultyText","history","pushState","toggle","App","handleKeyboard","which","navigateCells","nightMode","t","createMuiTheme","typography","useNextVariants","MuiThemeProvider_default","CssBaseline_default","presentation_TopBar","presentation_Sudoku","Numbers","presentation_CompletedDialog","presentation_ExitPrompt","document","removeEventListener","connect","setMode","TOGGLE_SETTING_NOTES_ENABLED","store","createStore","Root","es","presentation_App","ReactDOM","render","src_Root","getElementById","dispatch","getState","hidden","hiddenAt","removeItem"],"mappings":"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","file":"static/js/main.21b2bed9.chunk.js","sourcesContent":["module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"b96a843152969089af28.worker.js\");\n};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import Sudoku from '../models/Sudoku';\r\nimport { DIFFICULTY } from '../models/Difficulty';\r\nimport Settings from '../models/Settings';\r\n\r\nexport interface IGameState {\r\n  sudoku: {\r\n    past: Sudoku[];\r\n    current: Sudoku;\r\n    future: Sudoku[];\r\n  };\r\n  settings: Settings;\r\n  showExitPrompt: boolean;\r\n}\r\n\r\nexport enum DIRECTION {\r\n  Up,\r\n  Down,\r\n  Left,\r\n  Right\r\n}\r\n\r\nexport enum MODE {\r\n  Input,\r\n  Note\r\n}\r\n\r\nexport const CHANGE_DIFFICULTY = 'CHANGE_DIFFICULTY';\r\nexport const NEW_GAME = 'NEW_GAME';\r\nexport const VALIDATE_SOLUTION = 'VALIDATE_SOLUTION';\r\nexport const TOGGLE_CELL = 'TOGGLE_CELLs';\r\nexport const SET_DIGIT = 'SET_DIGIT';\r\nexport const REMOVE_DIGIT = 'REMOVE_DIGIT';\r\nexport const NAVIGATE_CELLS = 'NAVIGATE_CELLS';\r\nexport const TOGGLE_NOTE_MODE = 'TOGGLE_NOTE_MODE';\r\nexport const UNDO = 'UNDO';\r\nexport const REDO = 'REDO';\r\nexport const TOGGLE_NIGHT_MODE = 'TOGGLE_NIGHT_MODE';\r\nexport const RESET_SUDOKU = 'RESET_SUDOKU';\r\nexport const FILL_CANDIDATES = 'FILL_CANDIDATES';\r\nexport const CLEAR_CANDIDATES = 'CLEAR_CANDIDATES';\r\nexport const TOGGLE_SETTING_USE_NOTES = 'TOGGLE_SETTING_USE_NOTES';\r\nexport const TOGGLE_SETTING_MARK_COMPLETED = 'TOGGLE_SETTING_MARK_COMPLETED';\r\nexport const TOGGLE_SETTING_PROGRESS = 'TOGGLE_SETTING_PROGRESS';\r\nexport const TOGGLE_EXIT_PROMPT = 'TOGGLE_EXIT_PROMPT';\r\n\r\ninterface IChangeDifficultyAction {\r\n  type: typeof CHANGE_DIFFICULTY;\r\n  payload: DIFFICULTY;\r\n}\r\n\r\ninterface INewGameAction {\r\n  type: typeof NEW_GAME;\r\n}\r\n\r\ninterface IValidateSolutionAction {\r\n  type: typeof VALIDATE_SOLUTION;\r\n}\r\n\r\ninterface IToggleCellAction {\r\n  type: typeof TOGGLE_CELL;\r\n  payload: {\r\n    row: number;\r\n    column: number;\r\n  };\r\n}\r\n\r\ninterface ISetDigitAction {\r\n  type: typeof SET_DIGIT;\r\n  payload: {\r\n    digit: number;\r\n    force: boolean;\r\n  };\r\n}\r\n\r\ninterface IRemoveDigitAction {\r\n  type: typeof REMOVE_DIGIT;\r\n}\r\n\r\ninterface INavigateCellsAction {\r\n  type: typeof NAVIGATE_CELLS;\r\n  payload: {\r\n    direction: DIRECTION;\r\n  };\r\n}\r\n\r\ninterface ISetModeAction {\r\n  type: typeof TOGGLE_NOTE_MODE;\r\n  payload: {\r\n    mode: MODE;\r\n  };\r\n}\r\ninterface IUndoAction {\r\n  type: typeof UNDO;\r\n}\r\ninterface IRedoAction {\r\n  type: typeof REDO;\r\n}\r\ninterface IToggleNightModeAction {\r\n  type: typeof TOGGLE_NIGHT_MODE;\r\n}\r\n\r\ninterface IResetSudokuAction {\r\n  type: typeof RESET_SUDOKU;\r\n}\r\n\r\ninterface IFillCandidatesAction {\r\n  type: typeof FILL_CANDIDATES;\r\n}\r\n\r\ninterface IClearCandidatesAction {\r\n  type: typeof CLEAR_CANDIDATES;\r\n}\r\n\r\ninterface IToggleNotesEnabledAction {\r\n  type: typeof TOGGLE_SETTING_USE_NOTES;\r\n}\r\n\r\ninterface IToggleMarkCompletedAction {\r\n  type: typeof TOGGLE_SETTING_MARK_COMPLETED;\r\n}\r\n\r\ninterface IToggleProgressAction {\r\n  type: typeof TOGGLE_SETTING_PROGRESS;\r\n}\r\n\r\ninterface IToggleExitPrompt {\r\n  type: typeof TOGGLE_EXIT_PROMPT;\r\n}\r\n\r\nexport type OptionActions =\r\n  | IChangeDifficultyAction\r\n  | INewGameAction\r\n  | IValidateSolutionAction\r\n  | IToggleCellAction\r\n  | ISetDigitAction\r\n  | IRemoveDigitAction\r\n  | INavigateCellsAction\r\n  | ISetModeAction\r\n  | IUndoAction\r\n  | IRedoAction\r\n  | IToggleNightModeAction\r\n  | IResetSudokuAction\r\n  | IFillCandidatesAction\r\n  | IClearCandidatesAction\r\n  | IToggleNotesEnabledAction\r\n  | IToggleMarkCompletedAction\r\n  | IToggleProgressAction\r\n  | IToggleExitPrompt;\r\n","export enum DIFFICULTY {\r\n  VeryEasy = 30,\r\n  Easy = 36,\r\n  Normal = 42,\r\n  Hard = 50,\r\n  VeryHard = 57\r\n}\r\n","import { MODE } from '../store/types';\r\n\r\nconst NO_NOTES = [false, false, false, false, false, false, false, false, false];\r\n\r\nexport interface ISerializedCell {\r\n  active: true;\r\n  column: number;\r\n  given: boolean;\r\n  notes: boolean[];\r\n  row: number;\r\n  solution: number;\r\n  valid: true;\r\n  value: null | number;\r\n}\r\n\r\nexport default class Cell {\r\n  private value: number | null;\r\n  private valid: boolean;\r\n  private solution: number;\r\n  private row: number;\r\n  private column: number;\r\n  private given: boolean;\r\n  private active: boolean;\r\n  private notes: boolean[];\r\n\r\n  private constructor(previous?: Cell) {\r\n    this.value = previous ? previous.value : null;\r\n    this.solution = previous ? previous.solution : -1;\r\n    this.row = previous ? previous.row : -1;\r\n    this.column = previous ? previous.column : -1;\r\n    this.given = previous ? previous.given : false;\r\n    this.active = previous ? previous.active : false;\r\n    this.valid = previous ? previous.valid : true;\r\n    this.notes = previous ? previous.notes : [...NO_NOTES];\r\n  }\r\n\r\n  static create(solution: number, row: number, column: number, given: boolean): Cell {\r\n    const cell = new Cell();\r\n    cell.solution = solution;\r\n    cell.row = row;\r\n    cell.column = column;\r\n    cell.given = given;\r\n    cell.value = given ? solution : null;\r\n    return cell;\r\n  }\r\n\r\n  static deserialize(data: ISerializedCell) {\r\n    const cell = new Cell();\r\n\r\n    cell.value = data.value;\r\n    cell.solution = data.solution;\r\n    cell.row = data.row;\r\n    cell.column = data.column;\r\n    cell.given = data.given;\r\n    cell.active = data.active;\r\n    cell.valid = data.valid;\r\n    cell.notes = data.notes;\r\n\r\n    return cell;\r\n  }\r\n\r\n  public getSolution(): number {\r\n    return this.solution;\r\n  }\r\n\r\n  public getValue(): number | null {\r\n    return this.value;\r\n  }\r\n\r\n  public getRow(): number {\r\n    return this.row;\r\n  }\r\n\r\n  public getColumn(): number {\r\n    return this.column;\r\n  }\r\n\r\n  public isActive(): boolean {\r\n    return this.active;\r\n  }\r\n\r\n  public getBlock(): number {\r\n    if (this.row <= 3) {\r\n      return this.calculateBlock(0);\r\n    } else if (this.row >= 4 && this.row <= 6) {\r\n      return this.calculateBlock(1);\r\n    } else {\r\n      return this.calculateBlock(2);\r\n    }\r\n  }\r\n\r\n  private calculateBlock(modifier: number): number {\r\n    if (this.column <= 3) {\r\n      return modifier + 1;\r\n    } else if (this.column >= 4 && this.column <= 6) {\r\n      return modifier + 2;\r\n    } else {\r\n      return modifier + 3;\r\n    }\r\n  }\r\n\r\n  public isGiven(): boolean {\r\n    return this.given;\r\n  }\r\n\r\n  public validate(): Cell {\r\n    const cell = new Cell(this);\r\n    cell.valid = this.value === null || this.value === this.solution;\r\n    if (!cell.valid) {\r\n      cell.active = false;\r\n    }\r\n    return cell;\r\n  }\r\n\r\n  public isValid(): boolean {\r\n    return this.valid;\r\n  }\r\n\r\n  public setActive(active: boolean): Cell {\r\n    const cell = new Cell(this);\r\n    cell.active = active;\r\n    return cell;\r\n  }\r\n\r\n  public setDigit(digit: number, mode: MODE): Cell {\r\n    if (!this.active || this.given) {\r\n      return this;\r\n    }\r\n    const cell = new Cell(this);\r\n    if (mode === MODE.Note) {\r\n      cell.notes = this.notes.map((x, i) => (i === digit - 1 ? !x : x));\r\n      cell.value = null;\r\n    } else {\r\n      cell.value = this.value === digit ? null : digit;\r\n    }\r\n    cell.valid = true;\r\n    return cell;\r\n  }\r\n\r\n  public removeDigit(): Cell {\r\n    if (!this.active || this.given) {\r\n      return this;\r\n    }\r\n    const cell = new Cell(this);\r\n    cell.notes = [...NO_NOTES];\r\n    cell.value = null;\r\n    cell.valid = true;\r\n    return cell;\r\n  }\r\n\r\n  public isSolved(): boolean {\r\n    return this.value === this.solution;\r\n  }\r\n\r\n  public getNotes(): boolean[] {\r\n    return this.notes;\r\n  }\r\n\r\n  public clearNotes(): Cell {\r\n    const cell = new Cell(this);\r\n    cell.notes = cell.notes.map(n => false);\r\n    return cell;\r\n  }\r\n}\r\n","import Cell, { ISerializedCell } from './Cell';\r\nimport { MODE } from '../store/types';\r\nexport interface ISerializedRow {\r\n  active: boolean;\r\n  cells: ISerializedCell[];\r\n  index: number;\r\n}\r\nexport default class Row {\r\n  private cells: Cell[];\r\n  private index: number;\r\n  private active: boolean;\r\n\r\n  private constructor(previous?: Row) {\r\n    this.index = previous ? previous.index : -1;\r\n    this.active = previous ? previous.active : false;\r\n    this.cells = previous ? previous.cells : [];\r\n  }\r\n\r\n  static create(data: [number, boolean][], index: number): Row {\r\n    const row = new Row();\r\n    row.cells = [...data.map(([value, given], i) => Cell.create(value, index, i + 1, given))];\r\n    row.index = index;\r\n    return row;\r\n  }\r\n\r\n  static deserialize(data: ISerializedRow): Row {\r\n    const row = new Row();\r\n    row.active = data.active;\r\n    row.index = data.index;\r\n    row.cells = data.cells.map(Cell.deserialize);\r\n    return row;\r\n  }\r\n\r\n  public getCells(): Cell[] {\r\n    return this.cells;\r\n  }\r\n\r\n  public validate(): Row {\r\n    const row = new Row(this);\r\n    row.cells = this.cells.map(c => c.validate());\r\n    return row;\r\n  }\r\n\r\n  public getIndex(): number {\r\n    return this.index;\r\n  }\r\n\r\n  public toggleCell(index: number, column: number): Row {\r\n    if (this.index !== index && !this.active) {\r\n      return this;\r\n    }\r\n    const row = new Row(this);\r\n\r\n    if (this.active) {\r\n      if (this.index === index) {\r\n        row.cells = this.cells.map(c => {\r\n          return c.setActive(c.isActive() ? false : c.getColumn() === column);\r\n        });\r\n      } else {\r\n        row.active = false;\r\n        row.cells = this.cells.map(c => (c.isActive() ? c.setActive(false) : c));\r\n      }\r\n    } else if (this.index === index) {\r\n      row.active = true;\r\n      row.cells = this.cells.map(c => (c.getColumn() === column ? c.setActive(true) : c));\r\n    }\r\n    return row;\r\n  }\r\n\r\n  public isActive(): boolean {\r\n    return this.active;\r\n  }\r\n\r\n  public setDigit(digit: number, mode: MODE): Row {\r\n    if (!this.active) {\r\n      return this;\r\n    }\r\n    const row = new Row(this);\r\n    row.cells = this.cells.map(c => c.setDigit(digit, mode));\r\n    return row;\r\n  }\r\n\r\n  public removeDigit(): Row {\r\n    if (!this.active) {\r\n      return this;\r\n    }\r\n    const row = new Row(this);\r\n    row.cells = this.cells.map(c => c.removeDigit());\r\n    return row;\r\n  }\r\n\r\n  public clearCandidates(): Row {\r\n    const row = new Row(this);\r\n    row.cells = this.cells.map(c => c.clearNotes());\r\n    return row;\r\n  }\r\n}\r\n","export default class Analyzer {\r\n  constructor(private data: nullber[][]) {}\r\n\r\n  private segment<T>(data: T[]): segments<T> {\r\n    const rows: T[][] = [[], [], [], [], [], [], [], [], []];\r\n    const blocks: T[][] = [[], [], [], [], [], [], [], [], []];\r\n    const columns: T[][] = [[], [], [], [], [], [], [], [], []];\r\n\r\n    for (let i = 0; i < 81; i++) {\r\n      const v = data[i];\r\n      const { row, column, block } = this.findParents(i);\r\n      rows[row].push(v);\r\n      blocks[block].push(v);\r\n      columns[column].push(v);\r\n    }\r\n\r\n    return {\r\n      rows,\r\n      blocks,\r\n      columns\r\n    };\r\n  }\r\n\r\n  private findParents(index: number): { row: number; column: number; block: number } {\r\n    const row = ~~(index / 9);\r\n    const column = index % 9;\r\n    const block = ~~(row / 3) * 3 + ~~(column / 3);\r\n\r\n    return {\r\n      block,\r\n      row,\r\n      column\r\n    };\r\n  }\r\n\r\n  private findCandidates(data: nullber[]) {\r\n    const { rows, blocks, columns } = this.segment(data);\r\n    const candidates: number[][] = [];\r\n    for (let i = 0; i < 81; i++) {\r\n      const value = data[i];\r\n      candidates[i] = [];\r\n      if (value !== null) {\r\n        candidates[i].push(value);\r\n      } else {\r\n        const { row, column, block } = this.findParents(i);\r\n        for (let candidate = 1; candidate <= 9; candidate++) {\r\n          if (this.isAvailable(blocks[block], rows[row], columns[column], candidate)) {\r\n            candidates[i].push(candidate);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return candidates;\r\n  }\r\n\r\n  private isAvailable(block: nullber[], row: nullber[], column: nullber[], value: number): boolean {\r\n    for (let i = 0; i < 9; i++) {\r\n      if (block[i] === value || row[i] === value || column[i] === value) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  public getCandidates(): number[][][] {\r\n    const flatData = this.data.reduce((s, x) => s.concat(x), []);\r\n    const candidates = this.findCandidates(flatData);\r\n    const result = [] as number[][][];\r\n    for (let row = 0; row < 9; row++) {\r\n      result[row] = [];\r\n      for (let column = 0; column < 9; column++) {\r\n        result[row][column] = candidates[row * 9 + column];\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}\r\n\r\ntype nullber = number | null;\r\n\r\ntype segments<T> = {\r\n  rows: T[][];\r\n  blocks: T[][];\r\n  columns: T[][];\r\n};\r\n","import Row, { ISerializedRow } from './Row';\r\nimport { DIRECTION, MODE } from '../store/types';\r\nimport Cell from './Cell';\r\nimport Analyzer from './Analyzer';\r\n\r\nexport interface ISerializedSudoku {\r\n  activeCell: {\r\n    row: number;\r\n    column: number;\r\n  };\r\n  createdAt: number;\r\n  rows: ISerializedRow[];\r\n}\r\n\r\nexport default class Sudoku {\r\n  private rows: Row[];\r\n  private activeCell: { row: number; column: number };\r\n  private createdAt: number;\r\n\r\n  private constructor(previous?: Sudoku) {\r\n    this.rows = previous ? previous.rows : [];\r\n    this.activeCell = previous ? previous.activeCell : { row: -1, column: -1 };\r\n    this.createdAt = previous ? previous.createdAt : 0;\r\n  }\r\n\r\n  static create(data: [number, boolean][][]): Sudoku {\r\n    const sudoku = new Sudoku();\r\n    sudoku.createdAt = Date.now();\r\n    sudoku.rows = data.map((d, i) => Row.create(d, i + 1));\r\n    return sudoku;\r\n  }\r\n\r\n  public getRows(): Row[] {\r\n    return this.rows;\r\n  }\r\n\r\n  public validate(): Sudoku {\r\n    const sudoku = new Sudoku(this);\r\n    sudoku.rows = this.rows.map(r => r.validate());\r\n    return sudoku;\r\n  }\r\n\r\n  public activateCell(row: number, column: number): Sudoku {\r\n    const sudoku = new Sudoku(this);\r\n    if (sudoku.activeCell.row === row && sudoku.activeCell.column === column) {\r\n      sudoku.activeCell = { row: -1, column: -1 };\r\n    } else {\r\n      sudoku.activeCell = { row, column };\r\n    }\r\n    sudoku.rows = this.rows.map(r => r.toggleCell(row, column));\r\n    return sudoku;\r\n  }\r\n\r\n  public setDigit(digit: number, mode: MODE): Sudoku {\r\n    const sudoku = new Sudoku(this);\r\n    sudoku.rows = this.rows.map(r => r.setDigit(digit, mode));\r\n    return sudoku;\r\n  }\r\n\r\n  public removeDigit(): Sudoku {\r\n    const sudoku = new Sudoku(this);\r\n    sudoku.rows = this.rows.map(r => r.removeDigit());\r\n    return sudoku;\r\n  }\r\n\r\n  public getSolvedNumbers(): number[] {\r\n    const allNumbers = this.rows.reduce(\r\n      (acc: number[], next: Row) =>\r\n        acc.concat(\r\n          next.getCells().map(c => c.getValue() || 0),\r\n          []\r\n        ),\r\n      []\r\n    );\r\n    const solved = [];\r\n    for (let i = 1; i <= 9; i++) {\r\n      if (allNumbers.filter(n => n === i).length === 9) {\r\n        solved.push(i);\r\n      }\r\n    }\r\n    return solved;\r\n  }\r\n\r\n  public navigate(dirrection: DIRECTION): Sudoku {\r\n    const increment = (val: number) => (val === 9 ? 1 : val + 1);\r\n    const decrement = (val: number) => (val === 1 ? 9 : val - 1);\r\n    const activeCell = { ...this.activeCell };\r\n\r\n    switch (dirrection) {\r\n      case DIRECTION.Up:\r\n        activeCell.row = decrement(activeCell.row);\r\n        break;\r\n      case DIRECTION.Down:\r\n        activeCell.row = increment(activeCell.row);\r\n        break;\r\n      case DIRECTION.Right:\r\n        activeCell.column = increment(activeCell.column);\r\n        break;\r\n      case DIRECTION.Left:\r\n        activeCell.column = decrement(activeCell.column);\r\n        break;\r\n    }\r\n    return this.activateCell(activeCell.row, activeCell.column);\r\n  }\r\n\r\n  public isSolved(): boolean {\r\n    return this.rows.every(r => r.getCells().every(c => c.isSolved()));\r\n  }\r\n\r\n  public getCreationTimestamp(): number {\r\n    return this.createdAt;\r\n  }\r\n\r\n  public isDigitCompleted(digit: number): boolean {\r\n    return this.rows.flatMap(r => r.getCells().filter(c => c.getValue() === digit)).length === 9;\r\n  }\r\n\r\n  public countEmptyCells(): number {\r\n    const cells = this.rows.reduce((acc, row) => acc.concat(row.getCells()), [] as Cell[]);\r\n    return cells.reduce((sum, cell) => {\r\n      if (cell.getValue() === null) {\r\n        return sum + 1;\r\n      }\r\n      return sum;\r\n    }, 0);\r\n  }\r\n\r\n  public fillCandidates(): Sudoku {\r\n    const notes = this.rows.map(r => r.getCells().map(c => c.getNotes()));\r\n    const data = this.rows.map(r => r.getCells().map(c => c.getValue()));\r\n    const analyzer = new Analyzer(data);\r\n    const candidates = analyzer.getCandidates();\r\n    let sudoku = new Sudoku(this);\r\n    if (sudoku.activeCell.row !== -1 && sudoku.activeCell.column !== -1) {\r\n      sudoku = sudoku.activateCell(sudoku.activeCell.row, sudoku.activeCell.column);\r\n    }\r\n    candidates.forEach((rowCandidates, row) => {\r\n      rowCandidates.forEach((cellCandidates, cell) => {\r\n        sudoku = sudoku.activateCell(row + 1, cell + 1);\r\n        cellCandidates.forEach(candidate => {\r\n          if (data[row][cell] === null && !notes[row][cell][candidate - 1]) {\r\n            sudoku = sudoku.setDigit(candidate, MODE.Note);\r\n          }\r\n        });\r\n      });\r\n    });\r\n    return sudoku;\r\n  }\r\n\r\n  public clearCandidates(): Sudoku {\r\n    const sudoku = new Sudoku(this);\r\n    sudoku.rows = sudoku.rows.map(row => row.clearCandidates());\r\n    return sudoku;\r\n  }\r\n\r\n  public serialize(): string {\r\n    return JSON.stringify(this);\r\n  }\r\n\r\n  public static deserialize(serialized: string): Sudoku {\r\n    const data = JSON.parse(serialized) as ISerializedSudoku;\r\n    const sudoku = new Sudoku();\r\n    Object.assign(sudoku.activeCell, data.activeCell);\r\n    sudoku.createdAt = data.createdAt;\r\n    sudoku.rows = data.rows.map(Row.deserialize);\r\n    return sudoku;\r\n  }\r\n}\r\n","import Puzzles from './puzzles.json';\r\nimport { DIFFICULTY } from './models/Difficulty';\r\nimport Sudoku from './models/Sudoku';\r\nimport GeneratePuzzleWorker from './workers/GeneratePuzzle.worker';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nconst EMPTY_DATA: [number, boolean][][] = [\r\n  [\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false]\r\n  ],\r\n  [\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false]\r\n  ],\r\n  [\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false]\r\n  ],\r\n  [\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false]\r\n  ],\r\n  [\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false]\r\n  ],\r\n  [\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false]\r\n  ],\r\n  [\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false]\r\n  ],\r\n  [\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false]\r\n  ],\r\n  [\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false],\r\n    [1, false]\r\n  ]\r\n];\r\n\r\nconst PUZZLE_MAP_KEY = 'PUZZLE-MAP';\r\nconst BUFFER_SIZE = 20;\r\n\r\ntype idMap = { [key: number]: string[] };\r\ntype serializedPuzzle = (number | boolean)[][][];\r\n\r\nclass PuzzleStorage {\r\n  private worker: Worker;\r\n\r\n  constructor() {\r\n    this.inititializeStorage();\r\n    this.worker = new GeneratePuzzleWorker() as Worker;\r\n    this.worker.addEventListener('message', e => this.addPuzzle(e));\r\n  }\r\n\r\n  private inititializeStorage() {\r\n    if (!this.hasLocalStorageKeys()) {\r\n      const puzzles: idMap = {\r\n        [DIFFICULTY.VeryEasy]: this.saveJSONPuzzles(Puzzles.VeryEasy),\r\n        [DIFFICULTY.Easy]: this.saveJSONPuzzles(Puzzles.Easy),\r\n        [DIFFICULTY.Normal]: this.saveJSONPuzzles(Puzzles.Normal),\r\n        [DIFFICULTY.Hard]: this.saveJSONPuzzles(Puzzles.Hard),\r\n        [DIFFICULTY.VeryHard]: this.saveJSONPuzzles(Puzzles.VeryHard)\r\n      };\r\n      this.save(PUZZLE_MAP_KEY, puzzles);\r\n    }\r\n  }\r\n\r\n  private hasLocalStorageKeys(): boolean {\r\n    return !!window.localStorage[PUZZLE_MAP_KEY];\r\n  }\r\n\r\n  private saveJSONPuzzles(puzzles: serializedPuzzle[]): string[] {\r\n    return puzzles.map(p => {\r\n      const id = uuid();\r\n      this.save(id, p);\r\n      return id;\r\n    });\r\n  }\r\n\r\n  private decodeStoredPuzzle(puzzle: serializedPuzzle): Sudoku {\r\n    const decodedPuzle = [[], [], [], [], [], [], [], [], []] as [number, boolean][][];\r\n    puzzle.forEach((row, i) => {\r\n      decodedPuzle[i] = row.map(([value, given]) => [value, given] as [number, boolean]);\r\n    });\r\n    return Sudoku.create(decodedPuzle);\r\n  }\r\n\r\n  public getPuzzle(difficulty: DIFFICULTY): Sudoku {\r\n    const puzzleMap = this.load<idMap>(PUZZLE_MAP_KEY);\r\n    const id = puzzleMap[difficulty].shift();\r\n    if (!id) {\r\n      return Sudoku.create(EMPTY_DATA);\r\n    }\r\n    const puzzle = this.load<serializedPuzzle>(id);\r\n    const sudoku = this.decodeStoredPuzzle(puzzle);\r\n    this.save(PUZZLE_MAP_KEY, puzzleMap);\r\n    this.worker.postMessage(difficulty);\r\n\r\n    if (!!sudoku) {\r\n      return sudoku;\r\n    }\r\n    return Sudoku.create(EMPTY_DATA);\r\n  }\r\n\r\n  private addPuzzle(message: MessageEvent): void {\r\n    const difficulty = message.data.difficulty as DIFFICULTY;\r\n    const data = message.data.puzzleData as [number, boolean][][];\r\n    const id = uuid();\r\n    const puzzleMap = this.load<idMap>(PUZZLE_MAP_KEY);\r\n    puzzleMap[difficulty].push(id);\r\n    this.save(id, data);\r\n    this.save(PUZZLE_MAP_KEY, puzzleMap);\r\n    if (puzzleMap[difficulty].length < BUFFER_SIZE) {\r\n      this.worker.postMessage(difficulty);\r\n    }\r\n  }\r\n\r\n  private save(key: string, data: any): void {\r\n    window.localStorage.setItem(key, JSON.stringify(data));\r\n  }\r\n\r\n  private load<T>(key: string): T {\r\n    return JSON.parse(window.localStorage[key]) as T;\r\n  }\r\n}\r\n\r\nexport default new PuzzleStorage();\r\n","import {\r\n  IGameState,\r\n  OptionActions,\r\n  CHANGE_DIFFICULTY,\r\n  NEW_GAME,\r\n  VALIDATE_SOLUTION,\r\n  TOGGLE_CELL,\r\n  SET_DIGIT,\r\n  NAVIGATE_CELLS,\r\n  REMOVE_DIGIT,\r\n  TOGGLE_NOTE_MODE,\r\n  UNDO,\r\n  REDO,\r\n  MODE,\r\n  TOGGLE_NIGHT_MODE,\r\n  RESET_SUDOKU,\r\n  FILL_CANDIDATES,\r\n  CLEAR_CANDIDATES,\r\n  TOGGLE_SETTING_USE_NOTES,\r\n  TOGGLE_SETTING_MARK_COMPLETED,\r\n  TOGGLE_SETTING_PROGRESS,\r\n  TOGGLE_EXIT_PROMPT,\r\n} from './types';\r\nimport PuzzleStorage from '../PuzzleStorage';\r\nimport Settings from '../models/Settings';\r\nimport Sudoku from '../models/Sudoku';\r\n\r\nconst initialSettings = new Settings();\r\nconst savedCurrentSudoku = localStorage.getItem('current-sudoku-state');\r\nconst initialState: IGameState = {\r\n  sudoku: {\r\n    past: [],\r\n    current: savedCurrentSudoku\r\n      ? Sudoku.deserialize(savedCurrentSudoku)\r\n      : PuzzleStorage.getPuzzle(initialSettings.Difficulty).activateCell(1, 1),\r\n    future: [],\r\n  },\r\n  settings: initialSettings,\r\n  showExitPrompt: false,\r\n};\r\n\r\nexport function gameReducer(state = initialState, action: OptionActions): IGameState {\r\n  const result = gameReducerImplemenation(state, action);\r\n  if (result.sudoku.current !== state.sudoku.current) {\r\n    localStorage.setItem('current-sudoku-state', result.sudoku.current.serialize());\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction gameReducerImplemenation(state = initialState, action: OptionActions): IGameState {\r\n  switch (action.type) {\r\n    case TOGGLE_EXIT_PROMPT:\r\n      return {\r\n        ...state,\r\n        showExitPrompt: !state.showExitPrompt,\r\n      };\r\n    case CHANGE_DIFFICULTY:\r\n      return {\r\n        ...state,\r\n        settings: state.settings.setDifficulty(action.payload),\r\n        sudoku: {\r\n          past: [],\r\n          current: PuzzleStorage.getPuzzle(action.payload).activateCell(1, 1),\r\n          future: [],\r\n        },\r\n      };\r\n    case NEW_GAME:\r\n      const result = {\r\n        ...state,\r\n        sudoku: {\r\n          past: [],\r\n          current: PuzzleStorage.getPuzzle(state.settings.Difficulty).activateCell(1, 1),\r\n          future: [],\r\n        },\r\n      };\r\n      result.sudoku.current.serialize();\r\n      localStorage.setItem('hidden-for', '0');\r\n      return result;\r\n    case VALIDATE_SOLUTION:\r\n      return {\r\n        ...state,\r\n        sudoku: {\r\n          ...state.sudoku,\r\n          current: state.sudoku.current.validate(),\r\n        },\r\n      };\r\n    case TOGGLE_CELL:\r\n      return {\r\n        ...state,\r\n        sudoku: {\r\n          ...state.sudoku,\r\n          current: state.sudoku.current.activateCell(action.payload.row, action.payload.column),\r\n        },\r\n      };\r\n    case SET_DIGIT:\r\n      return {\r\n        ...state,\r\n        sudoku: {\r\n          past: [...state.sudoku.past, state.sudoku.current],\r\n          current: state.sudoku.current.setDigit(\r\n            action.payload.digit,\r\n            action.payload.force\r\n              ? state.settings.InputMode === MODE.Input\r\n                ? MODE.Note\r\n                : MODE.Input\r\n              : state.settings.InputMode\r\n          ),\r\n          future: [],\r\n        },\r\n      };\r\n    case REMOVE_DIGIT:\r\n      return {\r\n        ...state,\r\n        sudoku: {\r\n          past: [...state.sudoku.past, state.sudoku.current],\r\n          current: state.sudoku.current.removeDigit(),\r\n          future: [],\r\n        },\r\n      };\r\n    case NAVIGATE_CELLS:\r\n      return {\r\n        ...state,\r\n        sudoku: {\r\n          ...state.sudoku,\r\n          current: state.sudoku.current.navigate(action.payload.direction),\r\n        },\r\n      };\r\n    case TOGGLE_NOTE_MODE:\r\n      return {\r\n        ...state,\r\n        settings: state.settings.setInputMode(action.payload.mode),\r\n      };\r\n    case UNDO:\r\n      if (!state.sudoku.past.length) {\r\n        return state;\r\n      }\r\n      const previous = state.sudoku.past.slice(-1)[0];\r\n      return {\r\n        ...state,\r\n        sudoku: {\r\n          past: state.sudoku.past.slice(0, -1),\r\n          current: previous,\r\n          future: [...state.sudoku.future, state.sudoku.current],\r\n        },\r\n      };\r\n    case REDO:\r\n      if (!state.sudoku.future.length) {\r\n        return state;\r\n      }\r\n      const next = state.sudoku.future.slice(-1)[0];\r\n      return {\r\n        ...state,\r\n        sudoku: {\r\n          past: [...state.sudoku.past, state.sudoku.current],\r\n          current: next,\r\n          future: state.sudoku.future.slice(0, -1),\r\n        },\r\n      };\r\n    case TOGGLE_NIGHT_MODE:\r\n      return {\r\n        ...state,\r\n        settings: state.settings.toggleNightModeEnabled(),\r\n      };\r\n    case RESET_SUDOKU:\r\n      return {\r\n        ...state,\r\n        sudoku: {\r\n          past: [],\r\n          current: state.sudoku.past.shift() || state.sudoku.current,\r\n          future: [],\r\n        },\r\n      };\r\n    case FILL_CANDIDATES:\r\n      return {\r\n        ...state,\r\n        sudoku: {\r\n          past: [...state.sudoku.past, state.sudoku.current],\r\n          current: state.sudoku.current.fillCandidates(),\r\n          future: [],\r\n        },\r\n      };\r\n    case CLEAR_CANDIDATES:\r\n      return {\r\n        ...state,\r\n        sudoku: {\r\n          past: [...state.sudoku.past, state.sudoku.current],\r\n          current: state.sudoku.current.clearCandidates(),\r\n          future: [],\r\n        },\r\n      };\r\n    case TOGGLE_SETTING_USE_NOTES:\r\n      return {\r\n        ...state,\r\n        sudoku: {\r\n          ...state.sudoku,\r\n          current: state.settings.NotesEnabled\r\n            ? state.sudoku.current.clearCandidates()\r\n            : state.sudoku.current,\r\n        },\r\n        settings: state.settings.toggleNotesEnabled(),\r\n      };\r\n    case TOGGLE_SETTING_MARK_COMPLETED:\r\n      return {\r\n        ...state,\r\n        settings: state.settings.toggleMarkCompletedNumbersEnabled(),\r\n      };\r\n    case TOGGLE_SETTING_PROGRESS:\r\n      return {\r\n        ...state,\r\n        settings: state.settings.toggleProgressEnabled(),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { MODE } from '../store/types';\r\nimport { DIFFICULTY } from './Difficulty';\r\n\r\nconst SETTINGS_KEY = 'SETTINGS';\r\n\r\nexport default class Settings {\r\n  private notesEnabled: boolean;\r\n  private nightModeEnabled: boolean;\r\n  private inputMode: MODE;\r\n  private difficulty: DIFFICULTY;\r\n  private progressEnabled: boolean;\r\n  private markCompletedNumbersEnabled: boolean;\r\n\r\n  constructor() {\r\n    this.notesEnabled = true;\r\n    this.nightModeEnabled = false;\r\n    this.inputMode = MODE.Input;\r\n    this.difficulty = DIFFICULTY.Normal;\r\n    this.progressEnabled = true;\r\n    this.markCompletedNumbersEnabled = true;\r\n    this.readSettingsFromLocalStorage();\r\n  }\r\n\r\n  public get NotesEnabled(): boolean {\r\n    return this.notesEnabled;\r\n  }\r\n\r\n  public get NightModeEnabled(): boolean {\r\n    return this.nightModeEnabled;\r\n  }\r\n\r\n  public get ProgressEnabled(): boolean {\r\n    return this.progressEnabled;\r\n  }\r\n\r\n  public get MarkCompletedNumbersEnabled(): boolean {\r\n    return this.markCompletedNumbersEnabled;\r\n  }\r\n\r\n  public get InputMode(): MODE {\r\n    return this.inputMode;\r\n  }\r\n\r\n  public get Difficulty(): DIFFICULTY {\r\n    return this.difficulty;\r\n  }\r\n\r\n  private readSettingsFromLocalStorage() {\r\n    let settingsString = window.localStorage[SETTINGS_KEY];\r\n    if (!settingsString) {\r\n      this.saveSettingsToLocalStorage();\r\n    } else {\r\n      const settings = JSON.parse(settingsString);\r\n      Object.keys(settings).forEach(key => {\r\n        switch (key) {\r\n          case 'notesEnabled':\r\n            return (this.notesEnabled = settings[key] === true);\r\n          case 'nightModeEnabled':\r\n            return (this.nightModeEnabled = settings[key] === true);\r\n          case 'progressEnabled':\r\n            return (this.progressEnabled = settings[key] === true);\r\n          case 'markCompletedNumbersEnabled':\r\n            return (this.markCompletedNumbersEnabled = settings[key] === true);\r\n          case 'inputMode':\r\n            return (this.inputMode = +settings[key] as MODE);\r\n          case 'difficulty':\r\n            return (this.difficulty = +settings[key] as DIFFICULTY);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  public toggleNotesEnabled(): Settings {\r\n    this.notesEnabled = !this.notesEnabled;\r\n    if (!this.notesEnabled) {\r\n      this.inputMode = MODE.Input;\r\n    }\r\n    this.saveSettingsToLocalStorage();\r\n    return new Settings();\r\n  }\r\n\r\n  public toggleNightModeEnabled(): Settings {\r\n    this.nightModeEnabled = !this.nightModeEnabled;\r\n    this.saveSettingsToLocalStorage();\r\n    return new Settings();\r\n  }\r\n\r\n  public toggleProgressEnabled(): Settings {\r\n    this.progressEnabled = !this.progressEnabled;\r\n    this.saveSettingsToLocalStorage();\r\n    return new Settings();\r\n  }\r\n\r\n  public toggleMarkCompletedNumbersEnabled(): Settings {\r\n    this.markCompletedNumbersEnabled = !this.markCompletedNumbersEnabled;\r\n    this.saveSettingsToLocalStorage();\r\n    return new Settings();\r\n  }\r\n\r\n  public setInputMode(mode: MODE): Settings {\r\n    this.inputMode = mode;\r\n    this.saveSettingsToLocalStorage();\r\n    return new Settings();\r\n  }\r\n\r\n  public setDifficulty(difficulty: DIFFICULTY): Settings {\r\n    this.difficulty = difficulty;\r\n    this.saveSettingsToLocalStorage();\r\n    return new Settings();\r\n  }\r\n\r\n  private saveSettingsToLocalStorage(): void {\r\n    window.localStorage.setItem(\r\n      SETTINGS_KEY,\r\n      JSON.stringify({\r\n        notesEnabled: this.notesEnabled,\r\n        nightModeEnabled: this.nightModeEnabled,\r\n        progressEnabled: this.progressEnabled,\r\n        markCompletedNumbersEnabled: this.markCompletedNumbersEnabled,\r\n        inputMode: this.inputMode,\r\n        difficulty: this.difficulty\r\n      })\r\n    );\r\n  }\r\n}\r\n","import 'typeface-roboto';\r\nimport { createStore, combineReducers } from 'redux';\r\n\r\nimport { gameReducer } from './reducers';\r\n\r\nconst rootReducer = combineReducers({\r\n  game: gameReducer\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nexport default function configureStore() {\r\n  const store = createStore(rootReducer);\r\n\r\n  return store;\r\n}\r\n","import React, { Component } from 'react';\r\nimport Cell from '../models/Cell';\r\nimport { toggleCell } from '../store/actions';\r\nimport { createStyles, Theme, WithStyles, withStyles } from '@material-ui/core';\r\nimport { MODE } from '../store/types';\r\n\r\nconst styles = (theme: Theme) => {\r\n  const borderThin = `solid 1px ${theme.palette.primary.dark}`;\r\n  const borderThick = `solid 2px ${theme.palette.primary.dark}`;\r\n\r\n  return createStyles({\r\n    container: {\r\n      display: 'flex',\r\n      position: 'relative',\r\n      width: '11.111111%',\r\n      paddingBottom: '11.111111%',\r\n      textAlign: 'center',\r\n      userSelect: 'none',\r\n      fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\r\n    },\r\n    content: {\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      position: 'absolute',\r\n      top: 0,\r\n      right: 0,\r\n      bottom: 0,\r\n      left: 0,\r\n      borderRight: borderThin,\r\n      borderBottom: borderThin,\r\n      color: theme.palette.type === 'dark' ? theme.palette.grey[400] : theme.palette.primary.dark,\r\n    },\r\n    thickBorderTop: {\r\n      borderTop: borderThick,\r\n    },\r\n    thickBorderBottom: {\r\n      borderBottom: borderThick,\r\n    },\r\n    thickBorderLeft: {\r\n      borderLeft: borderThick,\r\n    },\r\n    thickBorderRight: {\r\n      borderRight: borderThick,\r\n    },\r\n    dark: {\r\n      backgroundColor:\r\n        theme.palette.type === 'dark' ? theme.palette.primary.light : theme.palette.grey[200],\r\n    },\r\n    given: {\r\n      fontWeight: 'bold',\r\n    },\r\n    note: {\r\n      position: 'absolute',\r\n    },\r\n    inactiveNote: {\r\n      opacity: 0.1,\r\n    },\r\n    activeNote: {\r\n      opacity: 1,\r\n    },\r\n    note1: {\r\n      top: 0,\r\n      left: 0,\r\n      bottom: '66.666667%',\r\n      right: '66.666667%',\r\n    },\r\n    note2: {\r\n      top: '0',\r\n      left: '33.333333%',\r\n      bottom: '66.666667%',\r\n      right: '33.333333%',\r\n    },\r\n    note3: {\r\n      top: '0',\r\n      left: '66.666667%',\r\n      bottom: '66.666667%',\r\n      right: '0',\r\n    },\r\n    note4: {\r\n      top: '33.333333%',\r\n      left: '0',\r\n      bottom: '33.333333%',\r\n      right: '66.666667%',\r\n    },\r\n    note5: {\r\n      top: '33.333333%',\r\n      left: '33.333333%',\r\n      bottom: '33.333333%',\r\n      right: '33.333333%',\r\n    },\r\n    note6: {\r\n      top: '33.333333%',\r\n      left: '66.666667%',\r\n      bottom: '33.333333%',\r\n      right: '0',\r\n    },\r\n    note7: {\r\n      top: '66.666667%',\r\n      left: '0',\r\n      bottom: '0',\r\n      right: '66.666667%',\r\n    },\r\n    note8: {\r\n      top: '66.666667%',\r\n      left: '33.333333%',\r\n      bottom: '0',\r\n      right: '33.333333%',\r\n    },\r\n    note9: {\r\n      top: '66.666667%',\r\n      left: '66.666667%',\r\n      bottom: '0',\r\n      right: '0',\r\n    },\r\n    invalid: {\r\n      backgroundColor: theme.palette.error.light,\r\n      color: theme.palette.error.contrastText,\r\n    },\r\n    active: {\r\n      backgroundColor:\r\n        theme.palette.type === 'dark' ? theme.palette.primary.dark : theme.palette.primary.light,\r\n      color: theme.palette.primary.contrastText,\r\n    },\r\n  });\r\n};\r\n\r\nexport interface ISudokuCellComponentProps extends WithStyles<typeof styles> {\r\n  cell: Cell;\r\n  size: number;\r\n  toggleCell: typeof toggleCell;\r\n  mode: MODE;\r\n}\r\n\r\nclass SudokuCellComponent extends Component<ISudokuCellComponentProps> {\r\n  public render(): JSX.Element {\r\n    const { classes } = this.props;\r\n    return (\r\n      <div className={classes.container} onClick={() => this.handleClick()}>\r\n        <div className={this.calculateClasses()}>{this.renderContent()}</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderContent(): JSX.Element {\r\n    const { classes } = this.props;\r\n    const value = this.props.cell.getValue();\r\n    if (!!value) {\r\n      return <span style={{ fontSize: `${this.props.size}px` }}>{value}</span>;\r\n    }\r\n    const notes = this.props.cell.getNotes();\r\n    const fontSize = `${Math.ceil(this.props.size / 3)}px`;\r\n    const cellClasses = [\r\n      classes.note1,\r\n      classes.note2,\r\n      classes.note3,\r\n      classes.note4,\r\n      classes.note5,\r\n      classes.note6,\r\n      classes.note7,\r\n      classes.note8,\r\n      classes.note9,\r\n    ];\r\n    return (\r\n      <React.Fragment>\r\n        {notes.map((x, i) => (\r\n          <span\r\n            className={`${classes.note} ${cellClasses[i]} ${\r\n              x ? classes.activeNote : classes.inactiveNote\r\n            }`}\r\n            key={i}\r\n            style={{ fontSize: fontSize }}>\r\n            {x || this.props.mode === MODE.Note ? i + 1 : ''}\r\n          </span>\r\n        ))}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  private handleClick(): void {\r\n    this.props.toggleCell(this.props.cell.getRow(), this.props.cell.getColumn());\r\n  }\r\n\r\n  private calculateClasses(): string {\r\n    const { classes } = this.props;\r\n    const cell = this.props.cell;\r\n    const row = cell.getRow();\r\n    const column = cell.getColumn();\r\n    const block = cell.getBlock();\r\n\r\n    const result = {\r\n      [classes.content]: true,\r\n      [classes.thickBorderTop]: row === 1,\r\n      [classes.thickBorderBottom]: row % 3 === 0,\r\n      [classes.thickBorderLeft]: column === 1,\r\n      [classes.thickBorderRight]: column % 3 === 0,\r\n      [classes.dark]: block % 2 === 0,\r\n      [classes.given]: cell.isGiven(),\r\n      [classes.invalid]: !cell.isValid(),\r\n      [classes.active]: cell.isActive(),\r\n    };\r\n    return Object.keys(result)\r\n      .filter(key => result[key])\r\n      .join(' ');\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(SudokuCellComponent);\r\n","import React, { Component } from 'react';\r\nimport Row from '../models/Row';\r\nimport SudokuCell from './SudokuCell';\r\nimport { createStyles, Theme, WithStyles, withStyles } from '@material-ui/core';\r\nimport { toggleCell } from '../store/actions';\r\nimport { MODE } from '../store/types';\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    sudokuRow: {\r\n      display: 'flex',\r\n      width: '100%'\r\n    }\r\n  });\r\n\r\nexport interface ISudokuRowProps extends WithStyles<typeof styles> {\r\n  row: Row;\r\n  rowSize: number;\r\n  toggleCell: typeof toggleCell;\r\n  mode: MODE;\r\n}\r\n\r\nclass SudokuRowComponent extends Component<ISudokuRowProps> {\r\n  public render(): JSX.Element {\r\n    const { classes } = this.props;\r\n    return <div className={classes.sudokuRow}>{this.renderRow()}</div>;\r\n  }\r\n\r\n  private renderRow(): JSX.Element[] | null {\r\n    return this.props.row\r\n      .getCells()\r\n      .map((c, i) => (\r\n        <SudokuCell\r\n          mode={this.props.mode}\r\n          toggleCell={this.props.toggleCell}\r\n          cell={c}\r\n          size={this.getCellSize()}\r\n          key={i}\r\n        />\r\n      ));\r\n  }\r\n\r\n  private getCellSize(): number {\r\n    return this.props.rowSize / 9;\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(SudokuRowComponent);\r\n","import React, { Component } from 'react';\r\nimport Sudoku from '../models/Sudoku';\r\nimport SudokuRow from './SudokuRow';\r\nimport { createNewGame, toggleCell, undo, redo, removeDigit } from '../store/actions';\r\nimport {\r\n  withStyles,\r\n  WithStyles,\r\n  createStyles,\r\n  Theme,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  IconButton,\r\n} from '@material-ui/core';\r\nimport UndoIcon from '@material-ui/icons/Undo';\r\nimport RedoIcon from '@material-ui/icons/Redo';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport Settings from '../models/Settings';\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    cardContent: {\r\n      padding: 0,\r\n    },\r\n    container: {\r\n      position: 'relative',\r\n      marginLeft: 'auto',\r\n      marginRight: 'auto',\r\n      '@media (orientation: portrait)': {\r\n        height: `calc(100vw - ${2.5 * theme.spacing.unit}px)`,\r\n        width: `calc(100vw - ${2.5 * theme.spacing.unit}px)`,\r\n      },\r\n      '@media (orientation: landscape)': {\r\n        height: 'calc(100vh - 2*64px - 100px)',\r\n        width: 'calc(100vh - 2*64px - 100px)',\r\n      },\r\n    },\r\n    sudoku: {\r\n      position: 'absolute',\r\n      top: 0,\r\n      bottom: 0,\r\n      left: 0,\r\n      right: 0,\r\n      padding: theme.spacing.unit,\r\n    },\r\n    toolbar: {\r\n      alignItems: 'center',\r\n      justifyContent: 'space-between',\r\n      padding: `0 ${theme.spacing.unit}px`,\r\n    },\r\n    toolbarButton: {\r\n      padding: theme.spacing.unit,\r\n    },\r\n    header: {\r\n      padding: theme.spacing.unit,\r\n      paddingBottom: 0,\r\n    },\r\n    headerButton: {\r\n      padding: theme.spacing.unit,\r\n    },\r\n  });\r\n\r\nexport interface ISudokuProps extends WithStyles<typeof styles> {\r\n  sudoku: Sudoku;\r\n  settings: Settings;\r\n  createNewGame: typeof createNewGame;\r\n  toggleCell: typeof toggleCell;\r\n  undo: typeof undo;\r\n  redo: typeof redo;\r\n  removeDigit: typeof removeDigit;\r\n  past: Sudoku[];\r\n  future: Sudoku[];\r\n}\r\n\r\nexport interface ISudokuState {\r\n  rowSize: number;\r\n  menuAnchor: any;\r\n}\r\n\r\nclass SudokuComponent extends Component<ISudokuProps, ISudokuState> {\r\n  private containerRef: React.RefObject<HTMLDivElement>;\r\n\r\n  constructor(props: ISudokuProps) {\r\n    super(props);\r\n    this.containerRef = React.createRef();\r\n    this.state = {\r\n      rowSize: 0,\r\n      menuAnchor: null,\r\n    };\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const { classes } = this.props;\r\n    return (\r\n      <React.Fragment>\r\n        <Card>\r\n          <CardContent className={classes.cardContent}>\r\n            <div className={classes.container} ref={this.containerRef}>\r\n              <div className={classes.sudoku}>{this.renderRows()}</div>\r\n            </div>\r\n          </CardContent>\r\n          <CardActions className={classes.toolbar}>\r\n            <IconButton\r\n              className={classes.toolbarButton}\r\n              color=\"inherit\"\r\n              disabled={!this.props.past.length}\r\n              onClick={() => this.props.undo()}>\r\n              <UndoIcon />\r\n            </IconButton>\r\n            <IconButton className={classes.toolbarButton} onClick={() => this.props.removeDigit()}>\r\n              <ClearIcon />\r\n            </IconButton>\r\n            <IconButton\r\n              className={classes.toolbarButton}\r\n              color=\"inherit\"\r\n              disabled={!this.props.future.length}\r\n              onClick={() => this.props.redo()}>\r\n              <RedoIcon />\r\n            </IconButton>\r\n          </CardActions>\r\n        </Card>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n  public componentDidMount(): void {\r\n    this.setCellSize();\r\n  }\r\n\r\n  private setCellSize = () => {\r\n    const rowDOM = this.containerRef.current;\r\n    if (rowDOM) {\r\n      const boundingRectangle = rowDOM.getBoundingClientRect();\r\n      const height = boundingRectangle.height - 100;\r\n      const width = boundingRectangle.width;\r\n      const smallestDimmesion = height < width ? height : width;\r\n      const fittedDimmension = 9 * Math.floor(smallestDimmesion / 9);\r\n      this.setState({\r\n        rowSize: fittedDimmension,\r\n      });\r\n    } else {\r\n      requestAnimationFrame(() => {\r\n        this.setCellSize();\r\n      });\r\n    }\r\n  };\r\n\r\n  private renderRows(): JSX.Element[] | null {\r\n    if (!this.state.rowSize) {\r\n      return null;\r\n    }\r\n    return this.props.sudoku\r\n      .getRows()\r\n      .map((r, i) => (\r\n        <SudokuRow\r\n          mode={this.props.settings.InputMode}\r\n          row={r}\r\n          key={i}\r\n          rowSize={this.state.rowSize}\r\n          toggleCell={this.props.toggleCell}\r\n        />\r\n      ));\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(SudokuComponent);\r\n","import React from 'react';\r\n\r\nimport { setDigit, removeDigit, setMode } from '../store/actions';\r\nimport Sudoku from '../models/Sudoku';\r\nimport {\r\n  Paper,\r\n  createStyles,\r\n  Theme,\r\n  WithStyles,\r\n  withStyles,\r\n  LinearProgress,\r\n} from '@material-ui/core';\r\nimport Chip, { ChipProps } from '@material-ui/core/Chip';\r\nimport Settings from '../models/Settings';\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    container: {\r\n      paddingTop: theme.spacing.unit,\r\n      marginLeft: 'auto',\r\n      marginRight: 'auto',\r\n    },\r\n    progress: {\r\n      borderBottomRightRadius: theme.spacing.unit / 2,\r\n      borderBottomLeftRadius: theme.spacing.unit / 2,\r\n    },\r\n    errorBar: {\r\n      backgroundColor: theme.palette.error.light,\r\n    },\r\n    successBar: {\r\n      backgroundColor: '#66bb6a',\r\n    },\r\n    chip: {\r\n      margin: '4px 2px 4px 2px',\r\n    },\r\n  });\r\n\r\ninterface INumbersProps extends WithStyles<typeof styles> {\r\n  setDigit: typeof setDigit;\r\n  removeDigit: typeof removeDigit;\r\n  setMode: typeof setMode;\r\n  sudoku: Sudoku;\r\n  settings: Settings;\r\n}\r\n\r\ninterface INumbersState {\r\n  longPressTimeout: number | null;\r\n  clickHandledByLongPress: boolean;\r\n}\r\n\r\nclass INumbers extends React.Component<INumbersProps, INumbersState> {\r\n  constructor(props: INumbersProps) {\r\n    super(props);\r\n    this.state = {\r\n      longPressTimeout: null,\r\n      clickHandledByLongPress: false,\r\n    };\r\n  }\r\n\r\n  private mouseDownHandler(value: number) {\r\n    const longPressTimeout = window.setTimeout(() => {\r\n      this.props.setDigit(value, this.props.settings.NotesEnabled);\r\n      this.setState({\r\n        clickHandledByLongPress: true,\r\n      });\r\n    }, 200);\r\n    this.setState({\r\n      longPressTimeout,\r\n    });\r\n  }\r\n\r\n  private mouseUpHandler() {\r\n    if (this.state.longPressTimeout) {\r\n      window.clearTimeout(this.state.longPressTimeout);\r\n    }\r\n  }\r\n\r\n  private getProgress() {\r\n    const cellsLeft = this.props.settings.Difficulty - this.props.sudoku.countEmptyCells();\r\n    const completionRatio = cellsLeft / this.props.settings.Difficulty;\r\n    return completionRatio * 100;\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const { classes } = this.props;\r\n    const sudoku = this.props.sudoku;\r\n    const isSolved = sudoku.isSolved();\r\n    const showRedProgressBar = sudoku.countEmptyCells() === 0 && !isSolved;\r\n    return (\r\n      <div className={classes.container}>\r\n        <Paper>\r\n          {[...Array(10).keys()].slice(1).map(x => {\r\n            let color: ChipProps['color'] = 'primary';\r\n            if (\r\n              this.props.sudoku.isDigitCompleted(x) &&\r\n              this.props.settings.MarkCompletedNumbersEnabled\r\n            ) {\r\n              color = 'default';\r\n            }\r\n            return (\r\n              <Chip\r\n                onMouseDown={() => this.mouseDownHandler(x)}\r\n                onTouchStart={() => this.mouseDownHandler(x)}\r\n                onMouseUp={() => this.mouseUpHandler()}\r\n                onTouchEnd={() => this.mouseUpHandler()}\r\n                onClick={() => {\r\n                  if (!this.state.clickHandledByLongPress) {\r\n                    this.props.setDigit(x);\r\n                  }\r\n                  this.setState({\r\n                    clickHandledByLongPress: false,\r\n                  });\r\n                }}\r\n                color={color}\r\n                className={classes.chip}\r\n                label={x}\r\n                key={x}\r\n              />\r\n            );\r\n          })}\r\n          {!this.props.settings.ProgressEnabled ? null : (\r\n            <LinearProgress\r\n              className={classes.progress}\r\n              classes={{\r\n                bar: showRedProgressBar ? classes.errorBar : '',\r\n              }}\r\n              variant=\"determinate\"\r\n              value={this.getProgress()}\r\n            />\r\n          )}\r\n        </Paper>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(INumbers);\r\n","import {\r\n  OptionActions,\r\n  CHANGE_DIFFICULTY,\r\n  NEW_GAME,\r\n  VALIDATE_SOLUTION,\r\n  TOGGLE_CELL,\r\n  SET_DIGIT,\r\n  REMOVE_DIGIT,\r\n  NAVIGATE_CELLS,\r\n  DIRECTION,\r\n  TOGGLE_NOTE_MODE,\r\n  REDO,\r\n  UNDO,\r\n  MODE,\r\n  TOGGLE_NIGHT_MODE,\r\n  RESET_SUDOKU,\r\n  FILL_CANDIDATES,\r\n  CLEAR_CANDIDATES,\r\n  TOGGLE_SETTING_USE_NOTES as TOGGLE_SETTING_NOTES_ENABLED,\r\n  TOGGLE_SETTING_MARK_COMPLETED,\r\n  TOGGLE_SETTING_PROGRESS,\r\n  TOGGLE_EXIT_PROMPT,\r\n} from './types';\r\nimport { DIFFICULTY } from '../models/Difficulty';\r\n\r\nexport function changeDifficulty(difficulty: DIFFICULTY): OptionActions {\r\n  return {\r\n    type: CHANGE_DIFFICULTY,\r\n    payload: difficulty,\r\n  };\r\n}\r\n\r\nexport function createNewGame(): OptionActions {\r\n  return {\r\n    type: NEW_GAME,\r\n  };\r\n}\r\n\r\nexport function validateSolution(): OptionActions {\r\n  return {\r\n    type: VALIDATE_SOLUTION,\r\n  };\r\n}\r\n\r\nexport function toggleCell(row: number, column: number): OptionActions {\r\n  return {\r\n    type: TOGGLE_CELL,\r\n    payload: {\r\n      row,\r\n      column,\r\n    },\r\n  };\r\n}\r\n\r\nexport function setDigit(digit: number, force: boolean = false): OptionActions {\r\n  return {\r\n    type: SET_DIGIT,\r\n    payload: {\r\n      digit,\r\n      force,\r\n    },\r\n  };\r\n}\r\n\r\nexport function removeDigit(): OptionActions {\r\n  return {\r\n    type: REMOVE_DIGIT,\r\n  };\r\n}\r\n\r\nexport function navigateCells(direction: DIRECTION): OptionActions {\r\n  return {\r\n    type: NAVIGATE_CELLS,\r\n    payload: {\r\n      direction,\r\n    },\r\n  };\r\n}\r\n\r\nexport function setMode(mode: MODE): OptionActions {\r\n  return {\r\n    type: TOGGLE_NOTE_MODE,\r\n    payload: {\r\n      mode,\r\n    },\r\n  };\r\n}\r\n\r\nexport function undo(): OptionActions {\r\n  return {\r\n    type: UNDO,\r\n  };\r\n}\r\n\r\nexport function redo(): OptionActions {\r\n  return {\r\n    type: REDO,\r\n  };\r\n}\r\n\r\nexport function toggleNightMode(): OptionActions {\r\n  return {\r\n    type: TOGGLE_NIGHT_MODE,\r\n  };\r\n}\r\n\r\nexport function resetSudoku(): OptionActions {\r\n  return {\r\n    type: RESET_SUDOKU,\r\n  };\r\n}\r\n\r\nexport function fillCandidates(): OptionActions {\r\n  return {\r\n    type: FILL_CANDIDATES,\r\n  };\r\n}\r\n\r\nexport function clearCandidates(): OptionActions {\r\n  return {\r\n    type: CLEAR_CANDIDATES,\r\n  };\r\n}\r\n\r\nexport function toggleNotesEnabled(): OptionActions {\r\n  return {\r\n    type: TOGGLE_SETTING_NOTES_ENABLED,\r\n  };\r\n}\r\n\r\nexport function toggleMarkCompleted(): OptionActions {\r\n  return {\r\n    type: TOGGLE_SETTING_MARK_COMPLETED,\r\n  };\r\n}\r\n\r\nexport function toggleProgress(): OptionActions {\r\n  return {\r\n    type: TOGGLE_SETTING_PROGRESS,\r\n  };\r\n}\r\n\r\nexport function toggleExitPrompt(): OptionActions {\r\n  return {\r\n    type: TOGGLE_EXIT_PROMPT,\r\n  };\r\n}\r\n","let resolvePromise = () => {};\r\nconst updateExistsPromise = new Promise((resolve, reject) => {\r\n  resolvePromise = resolve;\r\n});\r\n\r\nexport const registerUpdate = resolvePromise;\r\nexport default updateExistsPromise;\r\n","import React, { Component } from 'react';\r\nimport { createStyles, withStyles, WithStyles, Theme } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { DIFFICULTY } from '../models/Difficulty';\r\nimport {\r\n  changeDifficulty,\r\n  validateSolution,\r\n  createNewGame,\r\n  toggleNightMode,\r\n  resetSudoku,\r\n  fillCandidates,\r\n  clearCandidates,\r\n  setMode,\r\n  toggleNotesEnabled,\r\n  toggleMarkCompleted,\r\n  toggleProgress,\r\n} from '../store/actions';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport CollapseIcon from '@material-ui/icons/ExpandLess';\r\nimport ExpandIcon from '@material-ui/icons/ExpandMore';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport NewIcon from '@material-ui/icons/Casino';\r\nimport ResetIcon from '@material-ui/icons/Replay';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport FeatureIcon from '@material-ui/icons/Settings';\r\nimport DifficultyIcon from '@material-ui/icons/FitnessCenter';\r\nimport UpdateIcon from '@material-ui/icons/SyncProblem';\r\nimport ServiceWorkerUpdated from '../utils/ServiceWorkerUpdated';\r\nimport Settings from '../models/Settings';\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    grow: {\r\n      flexGrow: 1,\r\n    },\r\n    modeFab: {\r\n      position: 'fixed',\r\n      zIndex: 1,\r\n      bottom: 2 * theme.spacing.unit,\r\n      right: 2 * theme.spacing.unit,\r\n    },\r\n    menuButton: {\r\n      marginLeft: -12,\r\n      marginRight: 20,\r\n    },\r\n    drawerHeader: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      paddingTop: theme.spacing.unit / 2,\r\n      paddingBottom: theme.spacing.unit / 2,\r\n      paddingLeft: theme.spacing.unit,\r\n      paddingRight: theme.spacing.unit,\r\n      color:\r\n        theme.palette.type === 'dark'\r\n          ? theme.palette.primary.contrastText\r\n          : theme.palette.secondary.main,\r\n    },\r\n    drawerList: {\r\n      paddingTop: 0,\r\n    },\r\n    drawerPaper: {\r\n      [theme.breakpoints.down('xs')]: {\r\n        minWidth: '70%',\r\n      },\r\n      [theme.breakpoints.up('sm')]: {\r\n        minWidth: '40%',\r\n      },\r\n      [theme.breakpoints.up('lg')]: {\r\n        minWidth: '30%',\r\n      },\r\n    },\r\n    listHeader: {\r\n      backgroundColor: theme.palette.background.default,\r\n      textTransform: 'uppercase',\r\n    },\r\n    notesToggle: {\r\n      color: theme.palette.common.white,\r\n    },\r\n    subMenuButton: {\r\n      color:\r\n        theme.palette.type === 'dark'\r\n          ? theme.palette.primary.contrastText\r\n          : theme.palette.grey[600],\r\n    },\r\n    feature: {\r\n      paddingTop: 0,\r\n      paddingBottom: 0,\r\n    },\r\n  });\r\n\r\nexport interface ITopBarProps extends WithStyles<typeof styles> {\r\n  changeDifficulty: typeof changeDifficulty;\r\n  validateSolution: typeof validateSolution;\r\n  createNewGame: typeof createNewGame;\r\n  toggleNightMode: typeof toggleNightMode;\r\n  resetSudoku: typeof resetSudoku;\r\n  fillCandidates: typeof fillCandidates;\r\n  clearCandidates: typeof clearCandidates;\r\n  setMode: typeof setMode;\r\n  settings: Settings;\r\n  toggleNotesEnabled: typeof toggleNotesEnabled;\r\n  toggleMarkCompleted: typeof toggleMarkCompleted;\r\n  toggleProgress: typeof toggleProgress;\r\n}\r\nexport interface ITopBarState {\r\n  drawerOpen: boolean;\r\n  difficultyOpen: boolean;\r\n  helpOpen: boolean;\r\n  featuresOpen: boolean;\r\n  hasUpdates: boolean;\r\n}\r\n\r\nconst DIFFICUTIES = [\r\n  {\r\n    difficulty: DIFFICULTY.VeryEasy,\r\n    label: 'Very Easy',\r\n  },\r\n  {\r\n    difficulty: DIFFICULTY.Easy,\r\n    label: 'Easy',\r\n  },\r\n  {\r\n    difficulty: DIFFICULTY.Normal,\r\n    label: 'Medium',\r\n  },\r\n  {\r\n    difficulty: DIFFICULTY.Hard,\r\n    label: 'Hard',\r\n  },\r\n  {\r\n    difficulty: DIFFICULTY.VeryHard,\r\n    label: 'Very Hard',\r\n  },\r\n];\r\n\r\nclass TopBar extends Component<ITopBarProps, ITopBarState> {\r\n  constructor(props: ITopBarProps) {\r\n    super(props);\r\n    this.state = {\r\n      drawerOpen: false,\r\n      difficultyOpen: false,\r\n      helpOpen: false,\r\n      hasUpdates: false,\r\n      featuresOpen: false,\r\n    };\r\n\r\n    ServiceWorkerUpdated.then(() => {\r\n      this.setState({\r\n        hasUpdates: true,\r\n      });\r\n    });\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const { classes } = this.props;\r\n    return (\r\n      <React.Fragment>\r\n        <AppBar position=\"static\">\r\n          <Toolbar>\r\n            <IconButton\r\n              className={classes.menuButton}\r\n              color=\"inherit\"\r\n              onClick={() => this.openDrawer()}>\r\n              <MenuIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\r\n              {this.getBarText()}\r\n            </Typography>\r\n            <FormControlLabel\r\n              classes={{ label: classes.notesToggle }}\r\n              label=\"Night mode\"\r\n              labelPlacement=\"start\"\r\n              onClick={() => this.props.toggleNightMode()}\r\n              control={<Switch checked={this.props.settings.NightModeEnabled} />}\r\n            />\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Drawer\r\n          variant=\"temporary\"\r\n          classes={{ paper: classes.drawerPaper }}\r\n          open={this.state.drawerOpen}\r\n          onClose={() => this.closeDrawer()}>\r\n          <div className={classes.drawerHeader}>\r\n            <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\r\n              Options\r\n            </Typography>\r\n            <IconButton onClick={() => this.closeDrawer()}>\r\n              <ChevronLeftIcon />\r\n            </IconButton>\r\n          </div>\r\n          <List className={classes.drawerList}>\r\n            <ListSubheader className={classes.listHeader}>Puzzle</ListSubheader>\r\n            <ListItem button onClick={() => this.createNewGame()}>\r\n              <ListItemIcon>\r\n                <NewIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"New puzzle\" />\r\n            </ListItem>\r\n            <ListItem button onClick={() => this.reset()}>\r\n              <ListItemIcon>\r\n                <ResetIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Reset puzzle\" />\r\n            </ListItem>\r\n            <ListItem button onClick={() => this.toggleHelp()}>\r\n              <ListItemIcon>\r\n                <HelpIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Help\" />\r\n              {this.state.helpOpen ? (\r\n                <CollapseIcon className={classes.subMenuButton} />\r\n              ) : (\r\n                <ExpandIcon className={classes.subMenuButton} />\r\n              )}\r\n            </ListItem>\r\n            <Collapse in={this.state.helpOpen} timeout=\"auto\" unmountOnExit>\r\n              <List disablePadding>\r\n                <ListItem button onClick={() => this.validate()}>\r\n                  <ListItemText primary=\"Validate\" />\r\n                </ListItem>\r\n                <ListItem button onClick={() => this.fillCandidates()}>\r\n                  <ListItemText primary=\"Add notes\" />\r\n                </ListItem>\r\n                <ListItem button onClick={() => this.clearCandidates()}>\r\n                  <ListItemText primary=\"Clear notes\" />\r\n                </ListItem>\r\n              </List>\r\n            </Collapse>\r\n            <ListItem button onClick={() => this.toggleDifficulty()}>\r\n              <ListItemIcon>\r\n                <DifficultyIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Difficulty\" />\r\n              {this.state.difficultyOpen ? (\r\n                <CollapseIcon className={classes.subMenuButton} />\r\n              ) : (\r\n                <ExpandIcon className={classes.subMenuButton} />\r\n              )}\r\n            </ListItem>\r\n            <Collapse in={this.state.difficultyOpen} timeout=\"auto\" unmountOnExit>\r\n              <List disablePadding>{this.renderDifficulties()}</List>\r\n            </Collapse>\r\n            <ListSubheader className={classes.listHeader}>Settings</ListSubheader>\r\n            <ListItem button onClick={() => this.toggleFeatures()}>\r\n              <ListItemIcon>\r\n                <FeatureIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Features\" />\r\n              {this.state.featuresOpen ? (\r\n                <CollapseIcon className={classes.subMenuButton} />\r\n              ) : (\r\n                <ExpandIcon className={classes.subMenuButton} />\r\n              )}\r\n            </ListItem>\r\n            <Collapse in={this.state.featuresOpen} timeout=\"auto\" unmountOnExit>\r\n              <List disablePadding>\r\n                <ListItem\r\n                  button\r\n                  className={classes.feature}\r\n                  onClick={() => this.props.toggleNotesEnabled()}>\r\n                  <ListItemText primary=\"Use notes\" />\r\n                  <Switch checked={this.props.settings.NotesEnabled} />\r\n                </ListItem>\r\n                <ListItem\r\n                  button\r\n                  className={classes.feature}\r\n                  onClick={() => this.props.toggleMarkCompleted()}>\r\n                  <ListItemText primary=\"Mark completed numbers\" />\r\n                  <Switch checked={this.props.settings.MarkCompletedNumbersEnabled} />\r\n                </ListItem>\r\n                <ListItem\r\n                  button\r\n                  className={classes.feature}\r\n                  onClick={() => this.props.toggleProgress()}>\r\n                  <ListItemText primary=\"Show progress\" />\r\n                  <Switch checked={this.props.settings.ProgressEnabled} />\r\n                </ListItem>\r\n              </List>\r\n            </Collapse>\r\n            <ListItem disabled={!this.state.hasUpdates} button onClick={() => this.forceRefresh()}>\r\n              <ListItemIcon>\r\n                <UpdateIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Update App\" />\r\n            </ListItem>\r\n          </List>\r\n        </Drawer>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  private openDrawer(): void {\r\n    this.setState({\r\n      drawerOpen: true,\r\n    });\r\n  }\r\n\r\n  private closeDrawer(): void {\r\n    this.setState({\r\n      drawerOpen: false,\r\n    });\r\n  }\r\n\r\n  private renderDifficulties(): JSX.Element[] {\r\n    return DIFFICUTIES.map(option => (\r\n      <ListItem\r\n        button\r\n        key={option.difficulty}\r\n        selected={this.props.settings.Difficulty === option.difficulty}\r\n        onClick={() => this.setDifficulty(option.difficulty)}>\r\n        <ListItemText primary={option.label} />\r\n      </ListItem>\r\n    ));\r\n  }\r\n\r\n  private setDifficulty(difficulty: DIFFICULTY): void {\r\n    this.closeDrawer();\r\n    this.props.changeDifficulty(difficulty);\r\n  }\r\n\r\n  private validate(): void {\r\n    this.closeDrawer();\r\n    this.props.validateSolution();\r\n  }\r\n\r\n  private getBarText(): string {\r\n    const difficulty = DIFFICUTIES.find(\r\n      option => option.difficulty === this.props.settings.Difficulty\r\n    );\r\n    if (difficulty) {\r\n      return `${difficulty.label}`;\r\n    }\r\n    return '';\r\n  }\r\n  private createNewGame(): void {\r\n    this.closeDrawer();\r\n    this.props.createNewGame();\r\n  }\r\n\r\n  private reset(): void {\r\n    this.closeDrawer();\r\n    this.props.resetSudoku();\r\n  }\r\n\r\n  private fillCandidates(): void {\r\n    this.closeDrawer();\r\n    this.props.fillCandidates();\r\n  }\r\n\r\n  private clearCandidates(): void {\r\n    this.closeDrawer();\r\n    this.props.clearCandidates();\r\n  }\r\n\r\n  private async forceRefresh() {\r\n    let serviceWorker = await navigator.serviceWorker.getRegistration();\r\n    if (serviceWorker) {\r\n      await serviceWorker.unregister();\r\n    }\r\n    localStorage.clear();\r\n    window.location.reload(true);\r\n  }\r\n\r\n  private toggleDifficulty(): void {\r\n    this.setState({\r\n      featuresOpen: false,\r\n      helpOpen: false,\r\n      difficultyOpen: !this.state.difficultyOpen,\r\n    });\r\n  }\r\n\r\n  private toggleHelp(): void {\r\n    this.setState({\r\n      featuresOpen: false,\r\n      difficultyOpen: false,\r\n      helpOpen: !this.state.helpOpen,\r\n    });\r\n  }\r\n\r\n  private toggleFeatures(): void {\r\n    this.setState({\r\n      featuresOpen: !this.state.featuresOpen,\r\n      difficultyOpen: false,\r\n      helpOpen: false,\r\n    });\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(TopBar);\r\n","import React from 'react';\r\nimport {\r\n  withStyles,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Button,\r\n  createStyles,\r\n  WithStyles,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport { createNewGame } from '../store/actions';\r\nimport Sudoku from '../models/Sudoku';\r\nimport { DIFFICULTY } from '../models/Difficulty';\r\nimport Settings from '../models/Settings';\r\n\r\nconst styles = () => createStyles({});\r\n\r\nexport interface ICompletedDialogProps extends WithStyles<typeof styles> {\r\n  createNewGame: typeof createNewGame;\r\n  sudoku: Sudoku;\r\n  settings: Settings;\r\n}\r\n\r\nconst CompletedDialog: React.FunctionComponent<ICompletedDialogProps> = (\r\n  props: ICompletedDialogProps\r\n) => {\r\n  const formatMillisecons = (milliSeconds: number) => {\r\n    const pad = (num: number) => Math.round(num).toString().padStart(2, '0');\r\n\r\n    const seconds = pad((milliSeconds / 1000) % 60);\r\n    const minutes = pad((milliSeconds / (1000 * 60)) % 60);\r\n    const hours = pad((milliSeconds / (1000 * 60 * 60)) % 24);\r\n\r\n    return `${hours}:${minutes}:${seconds}`;\r\n  };\r\n\r\n  const difficultyText = () => {\r\n    switch (props.settings.Difficulty) {\r\n      case DIFFICULTY.VeryEasy:\r\n        return 'a very easy';\r\n      case DIFFICULTY.Easy:\r\n        return 'an easy';\r\n      case DIFFICULTY.Normal:\r\n        return 'a medium';\r\n      case DIFFICULTY.Hard:\r\n        return 'a hard';\r\n      case DIFFICULTY.VeryHard:\r\n        return 'a very hard';\r\n      default:\r\n        return 'an unknown';\r\n    }\r\n  };\r\n\r\n  const hiddenFor = +(localStorage.getItem('hidden-for') || 0);\r\n  const ellapsedTime = formatMillisecons(\r\n    Date.now() - props.sudoku.getCreationTimestamp() - hiddenFor\r\n  );\r\n\r\n  return (\r\n    <Dialog\r\n      disableBackdropClick\r\n      disableEscapeKeyDown\r\n      maxWidth=\"xl\"\r\n      open={props.sudoku.isSolved()}\r\n      fullWidth={true}>\r\n      <DialogTitle id=\"confirmation-dialog-title\">Done!</DialogTitle>\r\n      <DialogContent>\r\n        <Typography variant=\"body1\" gutterBottom>\r\n          You completed {difficultyText()} puzzle.\r\n        </Typography>\r\n        <Typography variant=\"body1\">Elapsed time: {ellapsedTime}</Typography>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button\r\n          onClick={() => {\r\n            props.createNewGame();\r\n          }}>\r\n          New Game\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(CompletedDialog);\r\n","import React from 'react';\r\nimport {\r\n  withStyles,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Button,\r\n  createStyles,\r\n  WithStyles,\r\n  Typography,\r\n} from '@material-ui/core';\r\n\r\nconst styles = () => createStyles({});\r\n\r\nexport interface IExitPromptProps extends WithStyles<typeof styles> {\r\n  open: boolean;\r\n  toggle: () => void;\r\n}\r\n\r\nconst ExitPrompt: React.FunctionComponent<IExitPromptProps> = (props: IExitPromptProps) => {\r\n  return (\r\n    <Dialog maxWidth=\"xl\" open={props.open} fullWidth={true}>\r\n      <DialogTitle id=\"confirmation-dialog-title\">Quit?</DialogTitle>\r\n      <DialogContent>\r\n        <Typography variant=\"body1\">\r\n          If you exit the application the history of the current puzzle will be lost. To quit the\r\n          application press the back button again.\r\n        </Typography>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button\r\n          onClick={() => {\r\n            window.history.pushState({}, '');\r\n            props.toggle();\r\n          }}>\r\n          Cancel\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(ExitPrompt);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport '../layout/App.scss';\r\nimport SudokuComponent from './Sudoku';\r\nimport Numbers from './Numbers';\r\nimport { AppState } from '../store';\r\nimport {\r\n  changeDifficulty,\r\n  createNewGame,\r\n  validateSolution,\r\n  toggleCell,\r\n  setDigit,\r\n  removeDigit,\r\n  navigateCells,\r\n  setMode,\r\n  redo,\r\n  undo,\r\n  toggleNightMode,\r\n  resetSudoku,\r\n  fillCandidates,\r\n  clearCandidates,\r\n  toggleNotesEnabled,\r\n  toggleMarkCompleted,\r\n  toggleProgress,\r\n  toggleExitPrompt,\r\n} from '../store/actions';\r\nimport Sudoku from '../models/Sudoku';\r\nimport { DIRECTION } from '../store/types';\r\nimport TopBar from './TopBar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport CompletedDialog from './CompletedDialog';\r\nimport MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider';\r\nimport theme from '../theme';\r\nimport Settings from '../models/Settings';\r\nimport ExitPrompt from './ExitPrompt';\r\n\r\ninterface IAppProps {\r\n  changeDifficulty: typeof changeDifficulty;\r\n  createNewGame: typeof createNewGame;\r\n  validateSolution: typeof validateSolution;\r\n  toggleCell: typeof toggleCell;\r\n  setDigit: typeof setDigit;\r\n  removeDigit: typeof removeDigit;\r\n  navigateCells: typeof navigateCells;\r\n  setMode: typeof setMode;\r\n  undo: typeof undo;\r\n  redo: typeof redo;\r\n  sudoku: Sudoku;\r\n  past: Sudoku[];\r\n  future: Sudoku[];\r\n  toggleNightMode: typeof toggleNightMode;\r\n  resetSudoku: typeof resetSudoku;\r\n  fillCandidates: typeof fillCandidates;\r\n  clearCandidates: typeof clearCandidates;\r\n  settings: Settings;\r\n  toggleNotesEnabled: typeof toggleNotesEnabled;\r\n  toggleMarkCompleted: typeof toggleMarkCompleted;\r\n  toggleProgress: typeof toggleProgress;\r\n  showExitPrompt: boolean;\r\n  toggleExitPrompt: typeof toggleExitPrompt;\r\n}\r\n\r\nclass App extends Component<IAppProps> {\r\n  public render(): JSX.Element {\r\n    const t = theme(this.props.settings.NightModeEnabled);\r\n    return (\r\n      <div className=\"App\">\r\n        <MuiThemeProvider theme={t}>\r\n          <CssBaseline />\r\n          <TopBar {...this.props} />\r\n          <div className=\"App-content\">\r\n            <SudokuComponent {...this.props} />\r\n            <Numbers {...this.props} />\r\n          </div>\r\n          <CompletedDialog {...this.props} />\r\n          <ExitPrompt open={this.props.showExitPrompt} toggle={this.props.toggleExitPrompt} />\r\n        </MuiThemeProvider>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  public componentDidMount(): void {\r\n    document.addEventListener('keydown', this.handleKeyboard);\r\n  }\r\n\r\n  public componentWillUnmount(): void {\r\n    document.removeEventListener('keydown', this.handleKeyboard);\r\n  }\r\n\r\n  private handleKeyboard = (e: KeyboardEvent) => {\r\n    const key = e.which;\r\n    if (key >= 49 && key <= 57) {\r\n      // [1...9]\r\n      this.props.setDigit(key - 48);\r\n    } else if (key === 8 || key === 2) {\r\n      // backspace || delete\r\n      this.props.removeDigit();\r\n    } else if (key === 37) {\r\n      //left\r\n      this.props.navigateCells(DIRECTION.Left);\r\n    } else if (key === 38) {\r\n      //up\r\n      this.props.navigateCells(DIRECTION.Up);\r\n    } else if (key === 39) {\r\n      // right\r\n      this.props.navigateCells(DIRECTION.Right);\r\n    } else if (key === 40) {\r\n      // down\r\n      this.props.navigateCells(DIRECTION.Down);\r\n    }\r\n  };\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n  sudoku: state.game.sudoku.current,\r\n  past: state.game.sudoku.past,\r\n  future: state.game.sudoku.future,\r\n  settings: state.game.settings,\r\n  showExitPrompt: state.game.showExitPrompt,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  changeDifficulty,\r\n  createNewGame,\r\n  validateSolution,\r\n  toggleCell,\r\n  setDigit,\r\n  removeDigit,\r\n  navigateCells,\r\n  setMode,\r\n  undo,\r\n  redo,\r\n  toggleNightMode,\r\n  resetSudoku,\r\n  fillCandidates,\r\n  clearCandidates,\r\n  toggleNotesEnabled,\r\n  toggleMarkCompleted,\r\n  toggleProgress,\r\n  toggleExitPrompt,\r\n})(App);\r\n","import { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nexport default (nightMode: boolean) => {\r\n  return createMuiTheme({\r\n    typography: {\r\n      useNextVariants: true\r\n    },\r\n    palette: {\r\n      type: nightMode ? 'dark' : 'light',\r\n      primary: {\r\n        main: '#424242'\r\n      },\r\n      secondary: {\r\n        main: '#616161'\r\n      }\r\n    }\r\n  });\r\n};\r\n","import './layout/index.scss';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport configureStore from './store';\r\nimport App from './presentation/App';\r\nimport pregenerate from './utils/pregenerate';\r\nimport { registerUpdate } from './utils/ServiceWorkerUpdated';\r\nimport { toggleExitPrompt } from './store/actions';\r\n\r\nconst store = configureStore();\r\n\r\nconst Root = () => (\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n);\r\n\r\ndebugger;\r\n\r\nReactDOM.render(<Root />, document.getElementById('root'));\r\nserviceWorker.register();\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n  (window as any).pregenerate = pregenerate;\r\n}\r\n\r\nserviceWorker.register({\r\n  onUpdate: () => {\r\n    registerUpdate();\r\n  },\r\n});\r\n\r\nwindow.addEventListener('load', () => {\r\n  window.history.pushState({}, '');\r\n});\r\n\r\nwindow.addEventListener('popstate', e => {\r\n  store.dispatch(toggleExitPrompt());\r\n});\r\n\r\nwindow.addEventListener('visibilitychange', () => {\r\n  if (store.getState().game.showExitPrompt) {\r\n    return;\r\n  }\r\n  if (document.hidden) {\r\n    localStorage.setItem('hidden-at', Date.now().toString());\r\n  } else {\r\n    const hiddenAt = +(localStorage.getItem('hidden-at') || 0);\r\n    const hiddenFor = +(localStorage.getItem('hidden-for') || 0);\r\n    localStorage.setItem('hidden-for', (hiddenFor + Date.now() - hiddenAt).toString());\r\n    localStorage.removeItem('hidden-at');\r\n  }\r\n});\r\n"],"sourceRoot":""}